{
    "requirements": [
        {
            "reqid": "state_req101",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=1 sRobot shall at the next timepoint satisfy (dgt_7 => state=1)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_7",
                    "state"
                ],
                "scope_mode": "(classifier = 1)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(( dgt_7 => state = 1 ))",
                "responseTextRange": [
                    54,
                    79
                ],
                "diagramVariables": "M = <b><i>(classifier = 1)</i></b>, Response = <b><i>(( dgt_7 => state = 1 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 1)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 1)",
                "scope_mode_ft": "(classifier = 1)",
                "post_condition_unexp_pt": "(dgt_7 -> (state = 1))",
                "post_condition_unexp_ft": "(dgt_7 -> (state = 1))",
                "post_condition_SMV_pt": "(dgt_7 -> (state = 1))",
                "post_condition_SMV_ft": "(dgt_7 -> (state = 1))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 1) & (! LAST))) | (X ((Lin_(classifier = 1) | LAST) | ((X (dgt_7 -> (state = 1))) & (! (Lin_(classifier = 1) | LAST))))))) & ((classifier = 1) -> ((Lin_(classifier = 1) | LAST) | ((X (dgt_7 -> (state = 1))) & (! (Lin_(classifier = 1) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 1) -> (Y (((Y Fin_(classifier = 1)) -> (dgt_7 -> (state = 1))) S (((Y Fin_(classifier = 1)) -> (dgt_7 -> (state = 1))) & Fin_(classifier = 1)))))) & (((! Lin_(classifier = 1)) S ((! Lin_(classifier = 1)) & Fin_(classifier = 1))) -> (((Y Fin_(classifier = 1)) -> (dgt_7 -> (state = 1))) S (((Y Fin_(classifier = 1)) -> (dgt_7 -> (state = 1))) & Fin_(classifier = 1)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 1)) & (Y (classifier = 1))) -> (Y (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (dgt_7 -> (state = 1))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (dgt_7 -> (state = 1))) & ((classifier = 1) & (Z (! (classifier = 1))))))))) & (((! ((! (classifier = 1)) & (Y (classifier = 1)))) S ((! ((! (classifier = 1)) & (Y (classifier = 1)))) & ((classifier = 1) & (Z (! (classifier = 1)))))) -> (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (dgt_7 -> (state = 1))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (dgt_7 -> (state = 1))) & ((classifier = 1) & (Z (! (classifier = 1))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 1)) and YtoPre((classifier = 1))) => YtoPre(S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (dgt_7 => (state = 1))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (dgt_7 => (state = 1))))))) and (S((not ((not ((classifier = 1)) and YtoPre((classifier = 1)))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),not ((not ((classifier = 1)) and YtoPre((classifier = 1))))) => S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (dgt_7 => (state = 1))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (dgt_7 => (state = 1))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (dgt_7 -> (state = 1))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (dgt_7 -> (state = 1))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (dgt_7 -> (state = 1))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (dgt_7 -> (state = 1))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 1)) & (X (classifier = 1)))) | (X (((classifier = 1) & (X (! (classifier = 1)))) | ((X (dgt_7 -> (state = 1))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))) & ((classifier = 1) -> (((classifier = 1) & (X (! (classifier = 1)))) | ((X (dgt_7 -> (state = 1))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))",
                "component": "sRobot"
            },
            "_id": "0e81c580-d497-11ee-a499-737e30250026"
        },
        {
            "reqid": "dtt_assumption",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While !(classifier=0) the  sRobot  shall always satisfy distance_to_target>=0",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "distance_to_target"
                ],
                "scope_mode": "(! ( classifier = 0 ))",
                "scopeTextRange": [
                    0,
                    20
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    22,
                    32
                ],
                "timingTextRange": [
                    41,
                    46
                ],
                "post_condition": "(distance_to_target >= 0)",
                "responseTextRange": [
                    48,
                    76
                ],
                "diagramVariables": "M = <b><i>(! ( classifier = 0 ))</i></b>, Response = <b><i>(distance_to_target >= 0)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(! ( classifier = 0 ))</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
                "scope_mode_pt": "(! (classifier = 0))",
                "scope_mode_ft": "(! (classifier = 0))",
                "post_condition_unexp_pt": "(distance_to_target >= 0)",
                "post_condition_unexp_ft": "(distance_to_target >= 0)",
                "post_condition_SMV_pt": "(distance_to_target >= 0)",
                "post_condition_SMV_ft": "(distance_to_target >= 0)",
                "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "CoCoSpecCode": "H((not ((classifier = 0)) => (distance_to_target >= 0)))",
                "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "ftExpanded": "(LAST V ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G ((! (classifier = 0)) -> (distance_to_target >= 0)))",
                "component": "sRobot"
            },
            "_id": "1c66d270-d155-11ee-8c07-63c7c629ab05"
        },
        {
            "reqid": "state_req201",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=2 sRobot shall at the next timepoint satisfy (dgt_7 => state=2)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_7",
                    "state"
                ],
                "scope_mode": "(classifier = 2)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(( dgt_7 => state = 2 ))",
                "responseTextRange": [
                    54,
                    79
                ],
                "diagramVariables": "M = <b><i>(classifier = 2)</i></b>, Response = <b><i>(( dgt_7 => state = 2 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 2)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 2)",
                "scope_mode_ft": "(classifier = 2)",
                "post_condition_unexp_pt": "(dgt_7 -> (state = 2))",
                "post_condition_unexp_ft": "(dgt_7 -> (state = 2))",
                "post_condition_SMV_pt": "(dgt_7 -> (state = 2))",
                "post_condition_SMV_ft": "(dgt_7 -> (state = 2))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 2) & (! LAST))) | (X ((Lin_(classifier = 2) | LAST) | ((X (dgt_7 -> (state = 2))) & (! (Lin_(classifier = 2) | LAST))))))) & ((classifier = 2) -> ((Lin_(classifier = 2) | LAST) | ((X (dgt_7 -> (state = 2))) & (! (Lin_(classifier = 2) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 2) -> (Y (((Y Fin_(classifier = 2)) -> (dgt_7 -> (state = 2))) S (((Y Fin_(classifier = 2)) -> (dgt_7 -> (state = 2))) & Fin_(classifier = 2)))))) & (((! Lin_(classifier = 2)) S ((! Lin_(classifier = 2)) & Fin_(classifier = 2))) -> (((Y Fin_(classifier = 2)) -> (dgt_7 -> (state = 2))) S (((Y Fin_(classifier = 2)) -> (dgt_7 -> (state = 2))) & Fin_(classifier = 2)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 2)) & (Y (classifier = 2))) -> (Y (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (dgt_7 -> (state = 2))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (dgt_7 -> (state = 2))) & ((classifier = 2) & (Z (! (classifier = 2))))))))) & (((! ((! (classifier = 2)) & (Y (classifier = 2)))) S ((! ((! (classifier = 2)) & (Y (classifier = 2)))) & ((classifier = 2) & (Z (! (classifier = 2)))))) -> (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (dgt_7 -> (state = 2))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (dgt_7 -> (state = 2))) & ((classifier = 2) & (Z (! (classifier = 2))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 2)) and YtoPre((classifier = 2))) => YtoPre(S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (dgt_7 => (state = 2))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (dgt_7 => (state = 2))))))) and (S((not ((not ((classifier = 2)) and YtoPre((classifier = 2)))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),not ((not ((classifier = 2)) and YtoPre((classifier = 2))))) => S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (dgt_7 => (state = 2))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (dgt_7 => (state = 2))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (dgt_7 -> (state = 2))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (dgt_7 -> (state = 2))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (dgt_7 -> (state = 2))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (dgt_7 -> (state = 2))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 2)) & (X (classifier = 2)))) | (X (((classifier = 2) & (X (! (classifier = 2)))) | ((X (dgt_7 -> (state = 2))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))) & ((classifier = 2) -> (((classifier = 2) & (X (! (classifier = 2)))) | ((X (dgt_7 -> (state = 2))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))",
                "component": "sRobot"
            },
            "_id": "345a0c00-d49b-11ee-a499-737e30250026"
        },
        {
            "reqid": "state_req202",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=2 sRobot shall at the next timepoint satisfy (! dgt_7 & dgt_3 => state=3)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_7",
                    "dgt_3",
                    "state"
                ],
                "scope_mode": "(classifier = 2)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(( ! dgt_7 & dgt_3 => state = 3 ))",
                "responseTextRange": [
                    54,
                    89
                ],
                "diagramVariables": "M = <b><i>(classifier = 2)</i></b>, Response = <b><i>(( ! dgt_7 & dgt_3 => state = 3 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 2)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 2)",
                "scope_mode_ft": "(classifier = 2)",
                "post_condition_unexp_pt": "(((! dgt_7) & dgt_3) -> (state = 3))",
                "post_condition_unexp_ft": "(((! dgt_7) & dgt_3) -> (state = 3))",
                "post_condition_SMV_pt": "(((! dgt_7) & dgt_3) -> (state = 3))",
                "post_condition_SMV_ft": "(((! dgt_7) & dgt_3) -> (state = 3))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 2) & (! LAST))) | (X ((Lin_(classifier = 2) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! (Lin_(classifier = 2) | LAST))))))) & ((classifier = 2) -> ((Lin_(classifier = 2) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! (Lin_(classifier = 2) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 2) -> (Y (((Y Fin_(classifier = 2)) -> (((! dgt_7) & dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 2)) -> (((! dgt_7) & dgt_3) -> (state = 3))) & Fin_(classifier = 2)))))) & (((! Lin_(classifier = 2)) S ((! Lin_(classifier = 2)) & Fin_(classifier = 2))) -> (((Y Fin_(classifier = 2)) -> (((! dgt_7) & dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 2)) -> (((! dgt_7) & dgt_3) -> (state = 3))) & Fin_(classifier = 2)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 2)) & (Y (classifier = 2))) -> (Y (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (((! dgt_7) & dgt_3) -> (state = 3))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (((! dgt_7) & dgt_3) -> (state = 3))) & ((classifier = 2) & (Z (! (classifier = 2))))))))) & (((! ((! (classifier = 2)) & (Y (classifier = 2)))) S ((! ((! (classifier = 2)) & (Y (classifier = 2)))) & ((classifier = 2) & (Z (! (classifier = 2)))))) -> (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (((! dgt_7) & dgt_3) -> (state = 3))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> (((! dgt_7) & dgt_3) -> (state = 3))) & ((classifier = 2) & (Z (! (classifier = 2))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 2)) and YtoPre((classifier = 2))) => YtoPre(S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => ((not (dgt_7) and dgt_3) => (state = 3))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => ((not (dgt_7) and dgt_3) => (state = 3))))))) and (S((not ((not ((classifier = 2)) and YtoPre((classifier = 2)))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),not ((not ((classifier = 2)) and YtoPre((classifier = 2))))) => S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => ((not (dgt_7) and dgt_3) => (state = 3))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => ((not (dgt_7) and dgt_3) => (state = 3))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 2)) & (X (classifier = 2)))) | (X (((classifier = 2) & (X (! (classifier = 2)))) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))) & ((classifier = 2) -> (((classifier = 2) & (X (! (classifier = 2)))) | ((X (((! dgt_7) & dgt_3) -> (state = 3))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))",
                "component": "sRobot"
            },
            "_id": "3964c9b0-d49b-11ee-a499-737e30250026"
        },
        {
            "reqid": "state_req203",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=2 sRobot shall at the next timepoint satisfy (! dgt_3 => state=3)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_3",
                    "state"
                ],
                "scope_mode": "(classifier = 2)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(( ! dgt_3 => state = 3 ))",
                "responseTextRange": [
                    54,
                    81
                ],
                "diagramVariables": "M = <b><i>(classifier = 2)</i></b>, Response = <b><i>(( ! dgt_3 => state = 3 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 2)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 2)",
                "scope_mode_ft": "(classifier = 2)",
                "post_condition_unexp_pt": "((! dgt_3) -> (state = 3))",
                "post_condition_unexp_ft": "((! dgt_3) -> (state = 3))",
                "post_condition_SMV_pt": "((! dgt_3) -> (state = 3))",
                "post_condition_SMV_ft": "((! dgt_3) -> (state = 3))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 2) & (! LAST))) | (X ((Lin_(classifier = 2) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! (Lin_(classifier = 2) | LAST))))))) & ((classifier = 2) -> ((Lin_(classifier = 2) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! (Lin_(classifier = 2) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 2) -> (Y (((Y Fin_(classifier = 2)) -> ((! dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 2)) -> ((! dgt_3) -> (state = 3))) & Fin_(classifier = 2)))))) & (((! Lin_(classifier = 2)) S ((! Lin_(classifier = 2)) & Fin_(classifier = 2))) -> (((Y Fin_(classifier = 2)) -> ((! dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 2)) -> ((! dgt_3) -> (state = 3))) & Fin_(classifier = 2)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 2)) & (Y (classifier = 2))) -> (Y (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> ((! dgt_3) -> (state = 3))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> ((! dgt_3) -> (state = 3))) & ((classifier = 2) & (Z (! (classifier = 2))))))))) & (((! ((! (classifier = 2)) & (Y (classifier = 2)))) S ((! ((! (classifier = 2)) & (Y (classifier = 2)))) & ((classifier = 2) & (Z (! (classifier = 2)))))) -> (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> ((! dgt_3) -> (state = 3))) S (((Y ((classifier = 2) & (Z (! (classifier = 2))))) -> ((! dgt_3) -> (state = 3))) & ((classifier = 2) & (Z (! (classifier = 2))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 2)) and YtoPre((classifier = 2))) => YtoPre(S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (not (dgt_3) => (state = 3))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (not (dgt_3) => (state = 3))))))) and (S((not ((not ((classifier = 2)) and YtoPre((classifier = 2)))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),not ((not ((classifier = 2)) and YtoPre((classifier = 2))))) => S(((YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (not (dgt_3) => (state = 3))) and ((classifier = 2) and ZtoPre(not ((classifier = 2))))),(YtoPre(((classifier = 2) and ZtoPre(not ((classifier = 2))))) => (not (dgt_3) => (state = 3))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 2)) & (! LAST)) & (X (classifier = 2))) & (! LAST))) | (X (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))) & ((classifier = 2) -> (((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 2) & (! LAST)) & (X (! (classifier = 2)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 2)) & (X (classifier = 2)))) | (X (((classifier = 2) & (X (! (classifier = 2)))) | ((X ((! dgt_3) -> (state = 3))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))) & ((classifier = 2) -> (((classifier = 2) & (X (! (classifier = 2)))) | ((X ((! dgt_3) -> (state = 3))) & (! ((classifier = 2) & (X (! (classifier = 2)))))))))",
                "component": "sRobot"
            },
            "_id": "3d8834a0-d49b-11ee-a499-737e30250026"
        },
        {
            "reqid": "state_req102",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=1 sRobot shall at the next timepoint satisfy (! dgt_7 & dgt_3 => state=2) ",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_7",
                    "dgt_3",
                    "state"
                ],
                "scope_mode": "(classifier = 1)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(( ! dgt_7 & dgt_3 => state = 2 ))",
                "responseTextRange": [
                    54,
                    89
                ],
                "diagramVariables": "M = <b><i>(classifier = 1)</i></b>, Response = <b><i>(( ! dgt_7 & dgt_3 => state = 2 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 1)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 1)",
                "scope_mode_ft": "(classifier = 1)",
                "post_condition_unexp_pt": "(((! dgt_7) & dgt_3) -> (state = 2))",
                "post_condition_unexp_ft": "(((! dgt_7) & dgt_3) -> (state = 2))",
                "post_condition_SMV_pt": "(((! dgt_7) & dgt_3) -> (state = 2))",
                "post_condition_SMV_ft": "(((! dgt_7) & dgt_3) -> (state = 2))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 1) & (! LAST))) | (X ((Lin_(classifier = 1) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! (Lin_(classifier = 1) | LAST))))))) & ((classifier = 1) -> ((Lin_(classifier = 1) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! (Lin_(classifier = 1) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 1) -> (Y (((Y Fin_(classifier = 1)) -> (((! dgt_7) & dgt_3) -> (state = 2))) S (((Y Fin_(classifier = 1)) -> (((! dgt_7) & dgt_3) -> (state = 2))) & Fin_(classifier = 1)))))) & (((! Lin_(classifier = 1)) S ((! Lin_(classifier = 1)) & Fin_(classifier = 1))) -> (((Y Fin_(classifier = 1)) -> (((! dgt_7) & dgt_3) -> (state = 2))) S (((Y Fin_(classifier = 1)) -> (((! dgt_7) & dgt_3) -> (state = 2))) & Fin_(classifier = 1)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 1)) & (Y (classifier = 1))) -> (Y (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (((! dgt_7) & dgt_3) -> (state = 2))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (((! dgt_7) & dgt_3) -> (state = 2))) & ((classifier = 1) & (Z (! (classifier = 1))))))))) & (((! ((! (classifier = 1)) & (Y (classifier = 1)))) S ((! ((! (classifier = 1)) & (Y (classifier = 1)))) & ((classifier = 1) & (Z (! (classifier = 1)))))) -> (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (((! dgt_7) & dgt_3) -> (state = 2))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> (((! dgt_7) & dgt_3) -> (state = 2))) & ((classifier = 1) & (Z (! (classifier = 1))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 1)) and YtoPre((classifier = 1))) => YtoPre(S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => ((not (dgt_7) and dgt_3) => (state = 2))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => ((not (dgt_7) and dgt_3) => (state = 2))))))) and (S((not ((not ((classifier = 1)) and YtoPre((classifier = 1)))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),not ((not ((classifier = 1)) and YtoPre((classifier = 1))))) => S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => ((not (dgt_7) and dgt_3) => (state = 2))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => ((not (dgt_7) and dgt_3) => (state = 2))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 1)) & (X (classifier = 1)))) | (X (((classifier = 1) & (X (! (classifier = 1)))) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))) & ((classifier = 1) -> (((classifier = 1) & (X (! (classifier = 1)))) | ((X (((! dgt_7) & dgt_3) -> (state = 2))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))",
                "component": "sRobot"
            },
            "_id": "566eb470-d497-11ee-a499-737e30250026"
        },
        {
            "reqid": "classifier_empty",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier=0 sRobot SHALL at the next timepoint satisfy state=0",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "state"
                ],
                "scope_mode": "(classifier = 0)",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    19,
                    24
                ],
                "timingTextRange": [
                    32,
                    52
                ],
                "post_condition": "(state = 0)",
                "responseTextRange": [
                    54,
                    68
                ],
                "diagramVariables": "M = <b><i>(classifier = 0)</i></b>, Response = <b><i>(state = 0)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 0)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 0)",
                "scope_mode_ft": "(classifier = 0)",
                "post_condition_unexp_pt": "(state = 0)",
                "post_condition_unexp_ft": "(state = 0)",
                "post_condition_SMV_pt": "(state = 0)",
                "post_condition_SMV_ft": "(state = 0)",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 0) & (! LAST))) | (X ((Lin_(classifier = 0) | LAST) | ((X (state = 0)) & (! (Lin_(classifier = 0) | LAST))))))) & ((classifier = 0) -> ((Lin_(classifier = 0) | LAST) | ((X (state = 0)) & (! (Lin_(classifier = 0) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 0) -> (Y (((Y Fin_(classifier = 0)) -> (state = 0)) S (((Y Fin_(classifier = 0)) -> (state = 0)) & Fin_(classifier = 0)))))) & (((! Lin_(classifier = 0)) S ((! Lin_(classifier = 0)) & Fin_(classifier = 0))) -> (((Y Fin_(classifier = 0)) -> (state = 0)) S (((Y Fin_(classifier = 0)) -> (state = 0)) & Fin_(classifier = 0)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 0)) & (Y (classifier = 0))) -> (Y (((Y ((classifier = 0) & (Z (! (classifier = 0))))) -> (state = 0)) S (((Y ((classifier = 0) & (Z (! (classifier = 0))))) -> (state = 0)) & ((classifier = 0) & (Z (! (classifier = 0))))))))) & (((! ((! (classifier = 0)) & (Y (classifier = 0)))) S ((! ((! (classifier = 0)) & (Y (classifier = 0)))) & ((classifier = 0) & (Z (! (classifier = 0)))))) -> (((Y ((classifier = 0) & (Z (! (classifier = 0))))) -> (state = 0)) S (((Y ((classifier = 0) & (Z (! (classifier = 0))))) -> (state = 0)) & ((classifier = 0) & (Z (! (classifier = 0))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 0)) and YtoPre((classifier = 0))) => YtoPre(S(((YtoPre(((classifier = 0) and ZtoPre(not ((classifier = 0))))) => (state = 0)) and ((classifier = 0) and ZtoPre(not ((classifier = 0))))),(YtoPre(((classifier = 0) and ZtoPre(not ((classifier = 0))))) => (state = 0)))))) and (S((not ((not ((classifier = 0)) and YtoPre((classifier = 0)))) and ((classifier = 0) and ZtoPre(not ((classifier = 0))))),not ((not ((classifier = 0)) and YtoPre((classifier = 0))))) => S(((YtoPre(((classifier = 0) and ZtoPre(not ((classifier = 0))))) => (state = 0)) and ((classifier = 0) and ZtoPre(not ((classifier = 0))))),(YtoPre(((classifier = 0) and ZtoPre(not ((classifier = 0))))) => (state = 0)))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 0)) & (! LAST)) & (X (classifier = 0))) & (! LAST))) | (X (((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST) | ((X (state = 0)) & (! ((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST))))))) & ((classifier = 0) -> (((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST) | ((X (state = 0)) & (! ((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 0)) & (! LAST)) & (X (classifier = 0))) & (! LAST))) | (X (((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST) | ((X (state = 0)) & (! ((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST))))))) & ((classifier = 0) -> (((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST) | ((X (state = 0)) & (! ((((classifier = 0) & (! LAST)) & (X (! (classifier = 0)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 0)) & (X (classifier = 0)))) | (X (((classifier = 0) & (X (! (classifier = 0)))) | ((X (state = 0)) & (! ((classifier = 0) & (X (! (classifier = 0)))))))))) & ((classifier = 0) -> (((classifier = 0) & (X (! (classifier = 0)))) | ((X (state = 0)) & (! ((classifier = 0) & (X (! (classifier = 0)))))))))",
                "component": "sRobot"
            },
            "_id": "9f373a90-d15b-11ee-8c07-63c7c629ab05"
        },
        {
            "reqid": "operationalstate_3",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While state = 3 sRobot shall at the next timepoint satisfy (!slowdown & halt & alert & turnoffUVC)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "slowdown",
                    "halt",
                    "alert",
                    "turnoffUVC"
                ],
                "scope_mode": "(state = 3)",
                "scopeTextRange": [
                    0,
                    14
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    16,
                    21
                ],
                "timingTextRange": [
                    29,
                    49
                ],
                "post_condition": "(( ! slowdown & halt & alert & turnoffUVC ))",
                "responseTextRange": [
                    51,
                    97
                ],
                "diagramVariables": "M = <b><i>(state = 3)</i></b>, Response = <b><i>(( ! slowdown & halt & alert & turnoffUVC ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(state = 3)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(state = 3)",
                "scope_mode_ft": "(state = 3)",
                "post_condition_unexp_pt": "((((! slowdown) & halt) & alert) & turnoffUVC)",
                "post_condition_unexp_ft": "((((! slowdown) & halt) & alert) & turnoffUVC)",
                "post_condition_SMV_pt": "((((! slowdown) & halt) & alert) & turnoffUVC)",
                "post_condition_SMV_ft": "((((! slowdown) & halt) & alert) & turnoffUVC)",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(state = 3) & (! LAST))) | (X ((Lin_(state = 3) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! (Lin_(state = 3) | LAST))))))) & ((state = 3) -> ((Lin_(state = 3) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! (Lin_(state = 3) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(state = 3) -> (Y (((Y Fin_(state = 3)) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) S (((Y Fin_(state = 3)) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) & Fin_(state = 3)))))) & (((! Lin_(state = 3)) S ((! Lin_(state = 3)) & Fin_(state = 3))) -> (((Y Fin_(state = 3)) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) S (((Y Fin_(state = 3)) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) & Fin_(state = 3)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (state = 3)) & (Y (state = 3))) -> (Y (((Y ((state = 3) & (Z (! (state = 3))))) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) S (((Y ((state = 3) & (Z (! (state = 3))))) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) & ((state = 3) & (Z (! (state = 3))))))))) & (((! ((! (state = 3)) & (Y (state = 3)))) S ((! ((! (state = 3)) & (Y (state = 3)))) & ((state = 3) & (Z (! (state = 3)))))) -> (((Y ((state = 3) & (Z (! (state = 3))))) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) S (((Y ((state = 3) & (Z (! (state = 3))))) -> ((((! slowdown) & halt) & alert) & turnoffUVC)) & ((state = 3) & (Z (! (state = 3))))))))",
                "CoCoSpecCode": "(H(((not ((state = 3)) and YtoPre((state = 3))) => YtoPre(S(((YtoPre(((state = 3) and ZtoPre(not ((state = 3))))) => (((not (slowdown) and halt) and alert) and turnoffUVC)) and ((state = 3) and ZtoPre(not ((state = 3))))),(YtoPre(((state = 3) and ZtoPre(not ((state = 3))))) => (((not (slowdown) and halt) and alert) and turnoffUVC)))))) and (S((not ((not ((state = 3)) and YtoPre((state = 3)))) and ((state = 3) and ZtoPre(not ((state = 3))))),not ((not ((state = 3)) and YtoPre((state = 3))))) => S(((YtoPre(((state = 3) and ZtoPre(not ((state = 3))))) => (((not (slowdown) and halt) and alert) and turnoffUVC)) and ((state = 3) and ZtoPre(not ((state = 3))))),(YtoPre(((state = 3) and ZtoPre(not ((state = 3))))) => (((not (slowdown) and halt) and alert) and turnoffUVC)))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (state = 3)) & (! LAST)) & (X (state = 3))) & (! LAST))) | (X (((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST))))))) & ((state = 3) -> (((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (state = 3)) & (! LAST)) & (X (state = 3))) & (! LAST))) | (X (((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST))))))) & ((state = 3) -> (((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((((state = 3) & (! LAST)) & (X (! (state = 3)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (state = 3)) & (X (state = 3)))) | (X (((state = 3) & (X (! (state = 3)))) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((state = 3) & (X (! (state = 3)))))))))) & ((state = 3) -> (((state = 3) & (X (! (state = 3)))) | ((X ((((! slowdown) & halt) & alert) & turnoffUVC)) & (! ((state = 3) & (X (! (state = 3)))))))))",
                "component": "sRobot"
            },
            "_id": "ab034e30-d54e-11ee-96cb-554c2e33540a"
        },
        {
            "reqid": "operationalstate_0",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While state = 0 sRobot shall at the next timepoint satisfy (!slowdown & !halt & !alert & !turnoffUVC)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "slowdown",
                    "halt",
                    "alert",
                    "turnoffUVC"
                ],
                "scope_mode": "(state = 0)",
                "scopeTextRange": [
                    0,
                    14
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    16,
                    21
                ],
                "timingTextRange": [
                    29,
                    49
                ],
                "post_condition": "(( ! slowdown & ! halt & ! alert & ! turnoffUVC ))",
                "responseTextRange": [
                    51,
                    100
                ],
                "diagramVariables": "M = <b><i>(state = 0)</i></b>, Response = <b><i>(( ! slowdown & ! halt & ! alert & ! turnoffUVC ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(state = 0)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(state = 0)",
                "scope_mode_ft": "(state = 0)",
                "post_condition_unexp_pt": "((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))",
                "post_condition_unexp_ft": "((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))",
                "post_condition_SMV_pt": "((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))",
                "post_condition_SMV_ft": "((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(state = 0) & (! LAST))) | (X ((Lin_(state = 0) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! (Lin_(state = 0) | LAST))))))) & ((state = 0) -> ((Lin_(state = 0) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! (Lin_(state = 0) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(state = 0) -> (Y (((Y Fin_(state = 0)) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) S (((Y Fin_(state = 0)) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & Fin_(state = 0)))))) & (((! Lin_(state = 0)) S ((! Lin_(state = 0)) & Fin_(state = 0))) -> (((Y Fin_(state = 0)) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) S (((Y Fin_(state = 0)) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & Fin_(state = 0)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (state = 0)) & (Y (state = 0))) -> (Y (((Y ((state = 0) & (Z (! (state = 0))))) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) S (((Y ((state = 0) & (Z (! (state = 0))))) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & ((state = 0) & (Z (! (state = 0))))))))) & (((! ((! (state = 0)) & (Y (state = 0)))) S ((! ((! (state = 0)) & (Y (state = 0)))) & ((state = 0) & (Z (! (state = 0)))))) -> (((Y ((state = 0) & (Z (! (state = 0))))) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) S (((Y ((state = 0) & (Z (! (state = 0))))) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & ((state = 0) & (Z (! (state = 0))))))))",
                "CoCoSpecCode": "(H(((not ((state = 0)) and YtoPre((state = 0))) => YtoPre(S(((YtoPre(((state = 0) and ZtoPre(not ((state = 0))))) => (((not (slowdown) and not (halt)) and not (alert)) and not (turnoffUVC))) and ((state = 0) and ZtoPre(not ((state = 0))))),(YtoPre(((state = 0) and ZtoPre(not ((state = 0))))) => (((not (slowdown) and not (halt)) and not (alert)) and not (turnoffUVC))))))) and (S((not ((not ((state = 0)) and YtoPre((state = 0)))) and ((state = 0) and ZtoPre(not ((state = 0))))),not ((not ((state = 0)) and YtoPre((state = 0))))) => S(((YtoPre(((state = 0) and ZtoPre(not ((state = 0))))) => (((not (slowdown) and not (halt)) and not (alert)) and not (turnoffUVC))) and ((state = 0) and ZtoPre(not ((state = 0))))),(YtoPre(((state = 0) and ZtoPre(not ((state = 0))))) => (((not (slowdown) and not (halt)) and not (alert)) and not (turnoffUVC))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (state = 0)) & (! LAST)) & (X (state = 0))) & (! LAST))) | (X (((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST))))))) & ((state = 0) -> (((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (state = 0)) & (! LAST)) & (X (state = 0))) & (! LAST))) | (X (((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST))))))) & ((state = 0) -> (((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((((state = 0) & (! LAST)) & (X (! (state = 0)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (state = 0)) & (X (state = 0)))) | (X (((state = 0) & (X (! (state = 0)))) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((state = 0) & (X (! (state = 0)))))))))) & ((state = 0) -> (((state = 0) & (X (! (state = 0)))) | ((X ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))) & (! ((state = 0) & (X (! (state = 0)))))))))",
                "component": "sRobot"
            },
            "_id": "b38c9630-d54c-11ee-96cb-554c2e33540a"
        },
        {
            "reqid": "operationalstate_1",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While state = 1 sRobot shall at the next timepoint satisfy (slowdown & !halt & alert & !turnoffUVC)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "slowdown",
                    "halt",
                    "alert",
                    "turnoffUVC"
                ],
                "scope_mode": "(state = 1)",
                "scopeTextRange": [
                    0,
                    14
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    16,
                    21
                ],
                "timingTextRange": [
                    29,
                    49
                ],
                "post_condition": "(( slowdown & ! halt & alert & ! turnoffUVC ))",
                "responseTextRange": [
                    51,
                    98
                ],
                "diagramVariables": "M = <b><i>(state = 1)</i></b>, Response = <b><i>(( slowdown & ! halt & alert & ! turnoffUVC ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(state = 1)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(state = 1)",
                "scope_mode_ft": "(state = 1)",
                "post_condition_unexp_pt": "(((slowdown & (! halt)) & alert) & (! turnoffUVC))",
                "post_condition_unexp_ft": "(((slowdown & (! halt)) & alert) & (! turnoffUVC))",
                "post_condition_SMV_pt": "(((slowdown & (! halt)) & alert) & (! turnoffUVC))",
                "post_condition_SMV_ft": "(((slowdown & (! halt)) & alert) & (! turnoffUVC))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(state = 1) & (! LAST))) | (X ((Lin_(state = 1) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! (Lin_(state = 1) | LAST))))))) & ((state = 1) -> ((Lin_(state = 1) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! (Lin_(state = 1) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(state = 1) -> (Y (((Y Fin_(state = 1)) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) S (((Y Fin_(state = 1)) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & Fin_(state = 1)))))) & (((! Lin_(state = 1)) S ((! Lin_(state = 1)) & Fin_(state = 1))) -> (((Y Fin_(state = 1)) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) S (((Y Fin_(state = 1)) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & Fin_(state = 1)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (state = 1)) & (Y (state = 1))) -> (Y (((Y ((state = 1) & (Z (! (state = 1))))) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) S (((Y ((state = 1) & (Z (! (state = 1))))) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & ((state = 1) & (Z (! (state = 1))))))))) & (((! ((! (state = 1)) & (Y (state = 1)))) S ((! ((! (state = 1)) & (Y (state = 1)))) & ((state = 1) & (Z (! (state = 1)))))) -> (((Y ((state = 1) & (Z (! (state = 1))))) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) S (((Y ((state = 1) & (Z (! (state = 1))))) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & ((state = 1) & (Z (! (state = 1))))))))",
                "CoCoSpecCode": "(H(((not ((state = 1)) and YtoPre((state = 1))) => YtoPre(S(((YtoPre(((state = 1) and ZtoPre(not ((state = 1))))) => (((slowdown and not (halt)) and alert) and not (turnoffUVC))) and ((state = 1) and ZtoPre(not ((state = 1))))),(YtoPre(((state = 1) and ZtoPre(not ((state = 1))))) => (((slowdown and not (halt)) and alert) and not (turnoffUVC))))))) and (S((not ((not ((state = 1)) and YtoPre((state = 1)))) and ((state = 1) and ZtoPre(not ((state = 1))))),not ((not ((state = 1)) and YtoPre((state = 1))))) => S(((YtoPre(((state = 1) and ZtoPre(not ((state = 1))))) => (((slowdown and not (halt)) and alert) and not (turnoffUVC))) and ((state = 1) and ZtoPre(not ((state = 1))))),(YtoPre(((state = 1) and ZtoPre(not ((state = 1))))) => (((slowdown and not (halt)) and alert) and not (turnoffUVC))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (state = 1)) & (! LAST)) & (X (state = 1))) & (! LAST))) | (X (((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST))))))) & ((state = 1) -> (((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (state = 1)) & (! LAST)) & (X (state = 1))) & (! LAST))) | (X (((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST))))))) & ((state = 1) -> (((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((((state = 1) & (! LAST)) & (X (! (state = 1)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (state = 1)) & (X (state = 1)))) | (X (((state = 1) & (X (! (state = 1)))) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((state = 1) & (X (! (state = 1)))))))))) & ((state = 1) -> (((state = 1) & (X (! (state = 1)))) | ((X (((slowdown & (! halt)) & alert) & (! turnoffUVC))) & (! ((state = 1) & (X (! (state = 1)))))))))",
                "component": "sRobot"
            },
            "_id": "c8d58010-d54c-11ee-96cb-554c2e33540a"
        },
        {
            "reqid": "classifier_assumption",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "sRobot SHALL always satisfy classifier=0 xor classifier=1 xor classifier=2",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "classifier"
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    0,
                    5
                ],
                "timingTextRange": [
                    13,
                    18
                ],
                "post_condition": "(classifier = 0 xor classifier = 1 xor classifier = 2)",
                "responseTextRange": [
                    20,
                    73
                ],
                "diagramVariables": "Response = <b><i>(classifier = 0 xor classifier = 1 xor classifier = 2)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((classifier = 0) xor (classifier = 1)) xor (classifier = 2))",
                "post_condition_unexp_ft": "(((classifier = 0) xor (classifier = 1)) xor (classifier = 2))",
                "post_condition_SMV_pt": "(((classifier = 0) xor (classifier = 1)) xor (classifier = 2))",
                "post_condition_SMV_ft": "(((classifier = 0) xor (classifier = 1)) xor (classifier = 2))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "CoCoSpecCode": "H((((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "ftExpanded": "(LAST V (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))",
                "component": "sRobot"
            },
            "_id": "cb9c9a00-d154-11ee-8c07-63c7c629ab05"
        },
        {
            "reqid": "state_req103",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While classifier = 1 sRobot shall at the next timepoint satisfy (! dgt_3 => state=3)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "classifier",
                    "dgt_3",
                    "state"
                ],
                "scope_mode": "(classifier = 1)",
                "scopeTextRange": [
                    0,
                    19
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    21,
                    26
                ],
                "timingTextRange": [
                    34,
                    54
                ],
                "post_condition": "(( ! dgt_3 => state = 3 ))",
                "responseTextRange": [
                    56,
                    83
                ],
                "diagramVariables": "M = <b><i>(classifier = 1)</i></b>, Response = <b><i>(( ! dgt_3 => state = 3 ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(classifier = 1)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(classifier = 1)",
                "scope_mode_ft": "(classifier = 1)",
                "post_condition_unexp_pt": "((! dgt_3) -> (state = 3))",
                "post_condition_unexp_ft": "((! dgt_3) -> (state = 3))",
                "post_condition_SMV_pt": "((! dgt_3) -> (state = 3))",
                "post_condition_SMV_ft": "((! dgt_3) -> (state = 3))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(classifier = 1) & (! LAST))) | (X ((Lin_(classifier = 1) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! (Lin_(classifier = 1) | LAST))))))) & ((classifier = 1) -> ((Lin_(classifier = 1) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! (Lin_(classifier = 1) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(classifier = 1) -> (Y (((Y Fin_(classifier = 1)) -> ((! dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 1)) -> ((! dgt_3) -> (state = 3))) & Fin_(classifier = 1)))))) & (((! Lin_(classifier = 1)) S ((! Lin_(classifier = 1)) & Fin_(classifier = 1))) -> (((Y Fin_(classifier = 1)) -> ((! dgt_3) -> (state = 3))) S (((Y Fin_(classifier = 1)) -> ((! dgt_3) -> (state = 3))) & Fin_(classifier = 1)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (classifier = 1)) & (Y (classifier = 1))) -> (Y (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> ((! dgt_3) -> (state = 3))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> ((! dgt_3) -> (state = 3))) & ((classifier = 1) & (Z (! (classifier = 1))))))))) & (((! ((! (classifier = 1)) & (Y (classifier = 1)))) S ((! ((! (classifier = 1)) & (Y (classifier = 1)))) & ((classifier = 1) & (Z (! (classifier = 1)))))) -> (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> ((! dgt_3) -> (state = 3))) S (((Y ((classifier = 1) & (Z (! (classifier = 1))))) -> ((! dgt_3) -> (state = 3))) & ((classifier = 1) & (Z (! (classifier = 1))))))))",
                "CoCoSpecCode": "(H(((not ((classifier = 1)) and YtoPre((classifier = 1))) => YtoPre(S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (not (dgt_3) => (state = 3))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (not (dgt_3) => (state = 3))))))) and (S((not ((not ((classifier = 1)) and YtoPre((classifier = 1)))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),not ((not ((classifier = 1)) and YtoPre((classifier = 1))))) => S(((YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (not (dgt_3) => (state = 3))) and ((classifier = 1) and ZtoPre(not ((classifier = 1))))),(YtoPre(((classifier = 1) and ZtoPre(not ((classifier = 1))))) => (not (dgt_3) => (state = 3))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (classifier = 1)) & (! LAST)) & (X (classifier = 1))) & (! LAST))) | (X (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))) & ((classifier = 1) -> (((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST) | ((X ((! dgt_3) -> (state = 3))) & (! ((((classifier = 1) & (! LAST)) & (X (! (classifier = 1)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (classifier = 1)) & (X (classifier = 1)))) | (X (((classifier = 1) & (X (! (classifier = 1)))) | ((X ((! dgt_3) -> (state = 3))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))) & ((classifier = 1) -> (((classifier = 1) & (X (! (classifier = 1)))) | ((X ((! dgt_3) -> (state = 3))) & (! ((classifier = 1) & (X (! (classifier = 1)))))))))",
                "component": "sRobot"
            },
            "_id": "e2434ef0-d561-11ee-80d5-f9575b8f0a7e"
        },
        {
            "reqid": "operationalstate_2",
            "parent_reqid": "",
            "project": "sRobot",
            "rationale": "",
            "comments": "",
            "fulltext": "While state = 2 sRobot shall at the next timepoint satisfy (!slowdown & halt & alert & !turnoffUVC)",
            "status": "completed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "slowdown",
                    "halt",
                    "alert",
                    "turnoffUVC"
                ],
                "scope_mode": "(state = 2)",
                "scopeTextRange": [
                    0,
                    14
                ],
                "component_name": "sRobot",
                "componentTextRange": [
                    16,
                    21
                ],
                "timingTextRange": [
                    29,
                    49
                ],
                "post_condition": "(( ! slowdown & halt & alert & ! turnoffUVC ))",
                "responseTextRange": [
                    51,
                    98
                ],
                "diagramVariables": "M = <b><i>(state = 2)</i></b>, Response = <b><i>(( ! slowdown & halt & alert & ! turnoffUVC ))</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(state = 2)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
                "scope_mode_pt": "(state = 2)",
                "scope_mode_ft": "(state = 2)",
                "post_condition_unexp_pt": "((((! slowdown) & halt) & alert) & (! turnoffUVC))",
                "post_condition_unexp_ft": "((((! slowdown) & halt) & alert) & (! turnoffUVC))",
                "post_condition_SMV_pt": "((((! slowdown) & halt) & alert) & (! turnoffUVC))",
                "post_condition_SMV_ft": "((((! slowdown) & halt) & alert) & (! turnoffUVC))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))) & ($scope_mode_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))",
                "ft": "((LAST V ((! (Fin_(state = 2) & (! LAST))) | (X ((Lin_(state = 2) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! (Lin_(state = 2) | LAST))))))) & ((state = 2) -> ((Lin_(state = 2) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! (Lin_(state = 2) | LAST))))))",
                "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y Fin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
                "pt": "((H (Lin_(state = 2) -> (Y (((Y Fin_(state = 2)) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) S (((Y Fin_(state = 2)) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & Fin_(state = 2)))))) & (((! Lin_(state = 2)) S ((! Lin_(state = 2)) & Fin_(state = 2))) -> (((Y Fin_(state = 2)) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) S (((Y Fin_(state = 2)) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & Fin_(state = 2)))))",
                "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$))))) -> (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S (((Y ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & (Z (! $scope_mode_pt$)))))))",
                "ptExpanded": "((H (((! (state = 2)) & (Y (state = 2))) -> (Y (((Y ((state = 2) & (Z (! (state = 2))))) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) S (((Y ((state = 2) & (Z (! (state = 2))))) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & ((state = 2) & (Z (! (state = 2))))))))) & (((! ((! (state = 2)) & (Y (state = 2)))) S ((! ((! (state = 2)) & (Y (state = 2)))) & ((state = 2) & (Z (! (state = 2)))))) -> (((Y ((state = 2) & (Z (! (state = 2))))) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) S (((Y ((state = 2) & (Z (! (state = 2))))) -> ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & ((state = 2) & (Z (! (state = 2))))))))",
                "CoCoSpecCode": "(H(((not ((state = 2)) and YtoPre((state = 2))) => YtoPre(S(((YtoPre(((state = 2) and ZtoPre(not ((state = 2))))) => (((not (slowdown) and halt) and alert) and not (turnoffUVC))) and ((state = 2) and ZtoPre(not ((state = 2))))),(YtoPre(((state = 2) and ZtoPre(not ((state = 2))))) => (((not (slowdown) and halt) and alert) and not (turnoffUVC))))))) and (S((not ((not ((state = 2)) and YtoPre((state = 2)))) and ((state = 2) and ZtoPre(not ((state = 2))))),not ((not ((state = 2)) and YtoPre((state = 2))))) => S(((YtoPre(((state = 2) and ZtoPre(not ((state = 2))))) => (((not (slowdown) and halt) and alert) and not (turnoffUVC))) and ((state = 2) and ZtoPre(not ((state = 2))))),(YtoPre(((state = 2) and ZtoPre(not ((state = 2))))) => (((not (slowdown) and halt) and alert) and not (turnoffUVC))))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! (state = 2)) & (! LAST)) & (X (state = 2))) & (! LAST))) | (X (((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST))))))) & ((state = 2) -> (((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST))))))",
                "ftExpanded": "((LAST V ((! ((((! (state = 2)) & (! LAST)) & (X (state = 2))) & (! LAST))) | (X (((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST))))))) & ((state = 2) -> (((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((((state = 2) & (! LAST)) & (X (! (state = 2)))) | LAST))))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))) & ($scope_mode_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))",
                "ftInfAUExpanded": "((G ((! ((! (state = 2)) & (X (state = 2)))) | (X (((state = 2) & (X (! (state = 2)))) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((state = 2) & (X (! (state = 2)))))))))) & ((state = 2) -> (((state = 2) & (X (! (state = 2)))) | ((X ((((! slowdown) & halt) & alert) & (! turnoffUVC))) & (! ((state = 2) & (X (! (state = 2)))))))))",
                "component": "sRobot"
            },
            "_id": "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
        }
    ],
    "variables": [
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "alert",
            "reqs": [
                "ab034e30-d54e-11ee-96cb-554c2e33540a",
                "b38c9630-d54c-11ee-96cb-554c2e33540a",
                "c8d58010-d54c-11ee-96cb-554c2e33540a",
                "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotalert"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "classifier",
            "reqs": [
                "0e81c580-d497-11ee-a499-737e30250026",
                "1c66d270-d155-11ee-8c07-63c7c629ab05",
                "345a0c00-d49b-11ee-a499-737e30250026",
                "3964c9b0-d49b-11ee-a499-737e30250026",
                "3d8834a0-d49b-11ee-a499-737e30250026",
                "566eb470-d497-11ee-a499-737e30250026",
                "9f373a90-d15b-11ee-8c07-63c7c629ab05",
                "cb9c9a00-d154-11ee-8c07-63c7c629ab05",
                "e2434ef0-d561-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "integer",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotclassifier"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "dgt_3",
            "reqs": [
                "3964c9b0-d49b-11ee-a499-737e30250026",
                "3d8834a0-d49b-11ee-a499-737e30250026",
                "566eb470-d497-11ee-a499-737e30250026",
                "e2434ef0-d561-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "distance_to_target > 3",
            "copilotAssignment": "distance_to_target > constant 3",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotdgt_3"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "dgt_7",
            "reqs": [
                "0e81c580-d497-11ee-a499-737e30250026",
                "345a0c00-d49b-11ee-a499-737e30250026",
                "3964c9b0-d49b-11ee-a499-737e30250026",
                "566eb470-d497-11ee-a499-737e30250026"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "distance_to_target > 7",
            "copilotAssignment": "distance_to_target > constant 7",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotdgt_7"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "distance_to_target",
            "reqs": [
                "1c66d270-d155-11ee-8c07-63c7c629ab05"
            ],
            "dataType": "integer",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotdistance_to_target"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "halt",
            "reqs": [
                "ab034e30-d54e-11ee-96cb-554c2e33540a",
                "b38c9630-d54c-11ee-96cb-554c2e33540a",
                "c8d58010-d54c-11ee-96cb-554c2e33540a",
                "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobothalt"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "slowdown",
            "reqs": [
                "ab034e30-d54e-11ee-96cb-554c2e33540a",
                "b38c9630-d54c-11ee-96cb-554c2e33540a",
                "c8d58010-d54c-11ee-96cb-554c2e33540a",
                "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotslowdown"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "state",
            "reqs": [
                "0e81c580-d497-11ee-a499-737e30250026",
                "345a0c00-d49b-11ee-a499-737e30250026",
                "3964c9b0-d49b-11ee-a499-737e30250026",
                "3d8834a0-d49b-11ee-a499-737e30250026",
                "566eb470-d497-11ee-a499-737e30250026",
                "9f373a90-d15b-11ee-8c07-63c7c629ab05",
                "ab034e30-d54e-11ee-96cb-554c2e33540a",
                "b38c9630-d54c-11ee-96cb-554c2e33540a",
                "c8d58010-d54c-11ee-96cb-554c2e33540a",
                "e2434ef0-d561-11ee-80d5-f9575b8f0a7e",
                "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "integer",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotstate"
        },
        {
            "project": "sRobot",
            "component_name": "sRobot",
            "variable_name": "turnoffUVC",
            "reqs": [
                "ab034e30-d54e-11ee-96cb-554c2e33540a",
                "b38c9630-d54c-11ee-96cb-554c2e33540a",
                "c8d58010-d54c-11ee-96cb-554c2e33540a",
                "ef580f50-d55b-11ee-80d5-f9575b8f0a7e"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "sRobotsRobotturnoffUVC"
        }
    ]
}